#!/bin/bash -e

scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
commandsdir="${scriptdir}/commands"
configdir=".kelp"
kelpfile="kelp.yaml"

export stage="dev"
export overlays="k8s/overlays"

export kubectl="kubectl"
export kustomize="${kubectl} kustomize ${overlays}/${stage}"
# By default run yq in docker to avoid the dependency
# For faster results, set yq=yq in your environment if you installed yq locally
export yq=${yq:-docker run -i --rm -v "${PWD}":/workdir mikefarah/yq}

configure_commands() {
    set +e
    export doc=$(${kustomize} | ${yq} '. | select(.kind=="Deployment" or .kind=="Job" or .kind=="CronJob")')
    set -e
    export app=$(echo "${doc}" | ${yq} 'select(document_index == 0) | .metadata.name')
    export namespace=$(echo "${doc}" | ${yq} 'select(document_index == 0) | .metadata.namespace')
    export image=$(echo "${doc}" | ${yq} 'select(document_index == 0) | .. | select(path | join(".") | test("\\.image$$"))' )
}

execute_commands() {
    for cmd in "$@"
    do
        if [[ -f "${configdir}/${cmd}" ]]
        then 
            # If an override exists in the config dir use that
            source "${configdir}/${cmd}"
        elif [[ -f "${commandsdir}/${cmd}" ]]
        then
            # Otherwise use the default command from the kelp directory 
            source "${commandsdir}/${cmd}"
        else
            echo "${cmd}: command not found"
            exit 1
        fi
    done
}
export -f execute_commands

# If no arguments are provided run "build up"
commands="${@:-build up}"

if [[ -f "${configdir}/${kelpfile}" ]]
then
    # Top level directory: process the resources from the kelpfile
    for dir in $(cat "${configdir}/${kelpfile}" | ${yq} '.resources[]')
    do
        echo "$(tput bold)$(tput setaf 6)${dir}$(tput sgr0)"
        cd ${dir}
        configure_commands
        execute_commands ${commands}
        cd - >/dev/null
    done
else
    # Regular directory: run the kelp command
    configure_commands
    execute_commands ${commands}
fi

exit 0
